#!/usr/bin/env python3
#####################################################################################
# Program is used for ploting all profiles generated by multi_transects.py          #
# Author: Lv Xiaoran                                                                #
# Created: June 2020                                                                #
#####################################################################################

import os
import argparse
import numpy as np
from scipy.io import loadmat
import matplotlib.pyplot as plt

######################################################################################
EXAMPLE = """example:
  
  plot_3D_multi_transects.py -f ./transects -d datavec -o multi_profile -i 0.2
  #plot_3D_multi_transects.py -f ./transects -d datavec2 -o multi_profile 
  plot_3D_multi_transects.py -f ./transects -d datavec -o multi_profile -l -0.4 -b 0.4 -t multi -r
"""

def create_parser():
    parser = argparse.ArgumentParser(description='Prepare data for Kite software',
                                     formatter_class=argparse.RawTextHelpFormatter,
                                     epilog=EXAMPLE)

    parser.add_argument('-f', '--folder', nargs=1, type=str, help='directory with transect*.mat files')

    parser.add_argument('-d', '--dataset', nargs=1, type=str, help='data set used to plot')

    parser.add_argument('-l', '--lbound', nargs=1, type=float, help='lower bound of profiles')

    parser.add_argument('-b', '--hbound', nargs=1, type=float, help='higher bound of profiles')

    parser.add_argument('-i', '--interval', nargs=1, type=float, help='interval between adjacent profiles')    

    parser.add_argument('-t', '--type', nargs=1, type=str, help='figure type: one is plotting all profile into on x-axis;'
                                                               'multi is plotting each profile respectively')
    parser.add_argument('-r', '--reverse', action='store_true', default=False, help='decide whether reverse the order of mat files.'
                                                                                    'The default order of mat file is increase with number')
    parser.add_argument('-o','--outfile',dest='outfile',nargs=1,
                        help='outfile name')
    
    return parser

def cmd_line_parse(iargs=None):
    parser = create_parser()
    inps = parser.parse_args(args=iargs)  
    
    return inps

def search_transect_files(inps):
    """collecting all transect*.mat file"""
    # search *.mat file
    mat_folder = inps.folder[0]
    print('searching mat files in {}'.format(mat_folder))
    mat_files = []
    path_list = os.listdir(mat_folder)
    for mat_file in path_list:
        if mat_file.find('.mat') != -1:
            mat_files.append(mat_file)
    mat_files.sort(key=sort_key)
   
    mat_num = len(mat_files)
 
    return mat_files, mat_num

def sort_key(s):
    """sort mat files by number"""
    if s:
        try:
            c = re.findall('^\d+', s)[0]
        except:
            c = -1
        return int(c)


def read_mat_file(mat_file, dataset):
    """read mat file"""
    data = loadmat(mat_file)
    # read profile length unit:m
    D = np.transpose(data['Distance_along_profile'])

    # read profile data unit:m
    InSARdata = data[dataset]

    # fault position
    df0_km = data['fault_position'][0,0]
    return D, InSARdata, df0_km

def nanmean(data, **args):
    return np.ma.filled(np.ma.masked_array(data, np.isnan(data)).mean(**args), fill_value=np.nan)

def nanstd(data, **args):
    return np.ma.filled(np.ma.masked_array(data, np.isnan(data)).std(**args), fill_value=np.nan)

def max(a, b):
    if a>b:
        return a
    else:
        return b

def min(a, b):
    if a<b:
        return a
    else:
        return b

def plot_multi_transects(inps):
    """plot 3D multi transects"""
    
    mat_files, mat_num = search_transect_files(inps)

    lbound = 0
    hbound = 0
    
    dataset = inps.dataset[0]
    # start to plot
    if inps.type[0] == 'one':
        fig = plt.figure()
        fig.set_size_inches(15, 10)
        ax = plt.Axes(fig, [0., 0., 1., 1.], )
        ax = fig.add_subplot(111)

        number = 0
        interval = inps.interval[0]

        if inps.reverse:
            mat_files = [i for i in mat_files[::-1]]

        for mat_file in mat_files:
            D, InSARdata, df0_km = read_mat_file(mat_file, dataset)
            
            data_max = np.nanmax(InSARdata)
            data_min = np.nanmin(InSARdata)

            InSARdata = InSARdata + number * interval
            avgInSAR = np.array(nanmean(InSARdata, axis=1))
            stdInSAR = np.array(nanstd(InSARdata, axis=1))
 
            data_mmax = np.nanmax(InSARdata)
            data_mmin = np.nanmin(InSARdata)       

            lbound = min(lbound, data_mmin)
            hbound = max(hbound, data_mmax)
            
            ax.plot(D/1000.0, InSARdata*100, 'o',
                        ms=1, mfc='Black', linewidth='0')
            for i in np.arange(0.0, 1.01, 0.01):
                ax.plot(D/1000.0, (avgInSAR-i*stdInSAR) *100, '-', 
                            color='#DCDCDC', alpha=0.5)
            for i in np.arange(0.0, 1.01, 0.01):
                ax.plot(D/1000.0, (avgInSAR+i*stdInSAR)*100, '-',
                            color='#DCDCDC', alpha=0.5)

            ax.plot(D/1000.0, avgInSAR*100, 'r-')

            number = number + 1

        # To plot the Fault location on the profile
        if inps.lbound:
            lbound = inps.lbound[0] * 100
        else:
            lbound = lbound * 100

        if inps.hbound:
            hbound = inps.hbound[0] * 100
        else:
            hbound = hbound * 100

        ax.plot([df0_km/1000.0, df0_km/1000.0], [lbound, hbound],
                    '--', color='black', linewidth='2')
        
        ax.set_ylim(lbound, hbound)
        
        font1 = {'family' : 'serif',
                 'weight': 'normal',
                 'size' : 18.}
        #ax.tick_params(which='both', direction='in', labelsize=18, bottom=True, top=False, left=True, right=True)
        #ax.set_xticklabels(ax.get_xticklabels(), rotation=-90, fontsize='18')
        #ax.set_yticklabels(ax.get_yticklabels(), rotation=-90)
        
        #ax.set_ylabel('LOS velocity [cm/yr]', font1, rotation=270)
        #ax.set_xlabel('Distance along profile [km]', font1, rotation=270)
        plt.xticks(rotation=-90)
        plt.yticks(rotation=-90) 
        plt.savefig(inps.outfile[0], dpi=150, bbox_inches='tight')    

    else:
        figure_size = [10, 10]
        fig, axes = plt.subplots(1, mat_num, figsize = figure_size)
        count = 0 

        if inps.reverse:
            mat_files = [i for i in mat_files[::-1]]

        for mat_file, ax in zip(mat_files, axes):
            D, InSARdata, df0_km = read_mat_file(mat_file, dataset)
            avgInSAR = np.array(nanmean(InSARdata, axis=1))
            stdInSAR = np.array(nanstd(InSARdata, axis=1))
 
            ax.plot(InSARdata*100, D/1000.0, 'o',
                        ms=1, mfc='Black', linewidth='0')
            for i in np.arange(0.0, 1.01, 0.01):
                ax.plot((avgInSAR-i*stdInSAR) *100, D/1000.0, '-', 
                            color='#DCDCDC', alpha=0.5)
            for i in np.arange(0.0, 1.01, 0.01):
                ax.plot((avgInSAR+i*stdInSAR)*100, D/1000.0, '-',
                            color='#DCDCDC', alpha=0.5)

            ax.plot(avgInSAR*100, D/1000.0, 'r-')

            # To plot the Fault location on the profile
            if inps.lbound:
                lbound = inps.lbound[0] * 100
            else:
                raise Exception('The lower bound for ploting must be given!')

            if inps.hbound:
                hbound = inps.hbound[0] * 100
            else:
                raise Exception('The lower bound for ploting must be given!')

            ax.plot([lbound, hbound], [df0_km/1000.0, df0_km/1000.0], 
                        '--', color='black', linewidth='2')
            
            #ax.set_ylim(lbound, hbound)
            ax.set_xlim(lbound, hbound)
            ax.invert_xaxis()
            
            ax.yaxis.tick_right()

            if count != ( mat_num - 1):
                ax.set_yticks([])
                
            #ax.set_ylabel('Distance along the profile')
            #ax.yaxis.set_label_position("right")


            count += 1

            #ax.tick_params(axis='x', labelrotation=-90) 
            #ax.tick_params(axis='y', labelrotation=-90) 
        font1 = {'family' : 'serif',
                 'weight': 'normal',
                 'size' : 18.}
        #ax.tick_params(which='both', direction='in', labelsize=18, bottom=True, top=False, left=True, right=True)
        #ax.set_xticklabels(ax.get_xticklabels(), rotation=-90, fontsize='18')
        #ax.set_yticklabels(ax.get_yticklabels(), rotation=-90)
        
        #ax.set_ylabel('LOS velocity [cm/yr]', font1, rotation=270)
        #ax.set_xlabel('Distance along profile [km]', font1, rotation=270)
        #plt.xticks(rotation=-90)
        #plt.yticks(rotation=-90) 
        plt.savefig(inps.outfile[0], dpi=150, bbox_inches='tight')    
    return

######################################################################################
def main(iargs=None):
    inps = cmd_line_parse(iargs)   
    
    plot_multi_transects(inps)
######################################################################################
if __name__ == '__main__':
    main()
